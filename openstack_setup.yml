---
- name: The script to set up OpenStack from your local host
  hosts: localhost
  vars:
    keypair_name: "{{ lookup('env', 'keypair_name') | default('keypair1') }}"
    network_name: "{{ lookup('env', 'network_name') | default('network1') }}"
    openstack_rc: "{{ lookup('env', 'openstack_rc_path') }}"
    openstack: source {{ openstack_rc }}; openstack
    private_key_path: "{{ lookup('env', 'private_key_path') }}"
    public_key_path: "{{ lookup('env', 'public_key_path') }}"
    public_network_name: "{{ lookup('env', 'public_network_name') }}"
    public_subnet_name: "{{ lookup('env', 'public_subnet_name') }}"
    router_name: "{{ lookup('env', 'router_name') }}"
    security_group_name: "{{ lookup('env', 'security_group_name') }}"
    server_flavor: "{{ lookup('env', 'server_flavor') }}"
    server_image: "{{ lookup('env', 'server_image') }}"
    server_name: "{{ lookup('env', 'server_name') }}"
    server_user: "{{ lookup('env', 'server_user') }}"
    subnet_name: "{{ lookup('env', 'subnet_name') | default('subnet1') }}"
    subnet_range: "{{ lookup('env', 'subnet_range') | default('192.168.4.0/24') }}"

  tasks:
    # Ensure the openstack client is installed on the system.
    - name: Install python-openstackclient
      become: true
      tags:
        - install
      package:
        name: python-openstackclient
        state: latest

    - name: Create router
      shell: "{{ openstack }} router create {{ router_name }} --format value -c id"
      register: router_uuid

    - name: Create network
      shell: "{{ openstack }} network create {{ network_name }} --format value -c id"
      register: private_network_uuid

    - name: Get the public_subnet dns_nameservers addresses
      shell: "{{ openstack }} subnet show {{ public_subnet_name }} --format value -c dns_nameservers"
      register: dns_nameservers

    - name: Create subnet
      shell: "{{ openstack }} subnet create --network {{ network_name }} --subnet-range {{ subnet_range }} {{ subnet_name }} --format value -c id"
      register: subnet_uuid

    - name: Set the DNS nameservers
      shell: "{{ openstack }} subnet set --dns-nameserver {{ item }} {{ subnet_name }}"
      with_items: "{{ dns_nameservers.stdout }}"

    - name: Add the private subnet to the router
      shell: "{{ openstack }} router add subnet {{ router_name }} {{ subnet_uuid.stdout }}"

    - name: Get the public network id
      shell: "{{ openstack }} network show {{ public_network_name }} --format value -c id"
      register: public_network_uuid

    - name: Assign the public network as the gateway for the new router
      shell: "source {{ openstack_rc }}; neutron router-gateway-set {{ router_uuid.stdout }} {{ public_network_uuid.stdout }}"

    - name: Create the security group for this use case
      shell: "{{ openstack }} security group create {{ security_group_name }}"

    - name: Create the security group that allows ping
      shell: "{{ openstack }} security group rule create --ingress --protocol icmp {{ security_group_name }}"
      ignore_errors: yes

    - name: Create the security group that allows ssh
      shell: "{{ openstack }} security group rule create --ingress --protocol tcp --dst-port 22 {{ security_group_name }}"
      ignore_errors: yes

    - name: Create the security group for secure http
      shell: "{{ openstack }} security group rule create --ingress --protocol tcp --dst-port 443 {{ security_group_name }}"
      ignore_errors: yes

    - name: Creating a floating ip on the {{ public_network_name }}
      shell: "{{ openstack }} floating ip create {{ public_network_name }} --format value -c floating_ip_address"
      register: floating_ip_address

    - name: Create a keypair to use on the instances
      shell: "{{ openstack }} keypair create --public-key {{ public_key_path }} {{ keypair_name }}"

    - name: Create a server instance in OpenStack
      shell: "{{ openstack }} server create --flavor {{ server_flavor }} --image {{ server_image }} --security-group {{ security_group_name }} --key-name {{ keypair_name }} {{ server_name }} --nic net-id={{ private_network_uuid.stdout }} --format value -c id"
      register: instance_uuid

    - name: Add the floating ip address {{ floating_ip_address.stdout }} to the server instance
      shell: "{{ openstack }} server add floating ip {{ server_name }} {{ floating_ip_address.stdout }}"

    - name: Wait for the server {{ server_name }} to boot
      local_action: wait_for
      args:
        host: "{{ floating_ip_address.stdout }}"
        port: 22
        state: started
        delay: 5
        timeout: 300

    - name: Print the command to connect to the jump host
      debug:
        msg: ssh -i {{ private_key_path }} {{ server_user }}@{{ floating_ip_address.stdout }}

    - name: Print the next step
      debug:
        msg: ansible-playbook openshift-ansible-contrib.yml -v --ssh-common-args='-i {{ private_key_path }}' -u {{ server_user }} -i {{ floating_ip_address.stdout }}
