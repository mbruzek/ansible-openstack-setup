---
- name: The steps to set up one server in a new OpenStack environment.
  hosts: localhost
  vars:
    keypair_name: "{{ lookup('env', 'keypair_name') | default('keypair1') }}"
    network_name: "{{ lookup('env', 'network_name') | default('network1') }}"
    openstack_location: ""
    openstack_rc: "{{ lookup('env', 'openstack_rc_path') }}"
    private_key_path: "{{ lookup('env', 'private_key_path') }}"
    public_key_path: "{{ lookup('env', 'public_key_path') }}"
    public_network_name: "{{ lookup('env', 'public_network_name') }}"
    public_subnet_name: "{{ lookup('env', 'public_subnet_name') }}"
    router_name: "{{ lookup('env', 'router_name') }}"
    security_group_name: "{{ lookup('env', 'security_group_name') }}"
    server_flavor:
      name: "{{ lookup('env', 'server_flavor') }}"
      disk: 40
      ram: 4096
      vcpu: 2
    server_image: "{{ lookup('env', 'server_image') }}"
    server_name: "{{ lookup('env', 'server_name') }}"
    server_user: "{{ lookup('env', 'server_user') }}"
    subnet_name: "{{ lookup('env', 'subnet_name') | default('subnet1') }}"
    subnet_range: "{{ lookup('env', 'subnet_range') | default('192.168.4.0/24') }}"

  tasks:
    # Check if the openstack client is already installed.
    - name: Checking the path for openstack client
      command: which openstack
      register: openstack_path
      ignore_errors: true

    # When the file exists use this value for openstack client location.
    - name: Setting the openstack location to path
      set_fact:
        openstack_location: "{{ openstack_path.stdout }}"
      when: openstack_path.stdout != ""

    # When openstack is not found in path, this block installs openstack client.
    - name: Installing the prerequisites for the openstack client
      block:
        # Install the common operating system packages.
        - name: Install common packages
          package:
            name: "{{ item }}"
            state: latest
          with_items:
            - gcc
            - libselinux-python
            - redhat-rpm-config
        # Ensure the Fedora packages are installed.
        - name: Installing the Fedora packages
          package:
            name: "{{ item }}"
            state: latest
          when: ansible_distribution == "Fedora"
          with_items:
            - python2-devel
            - python2-virtualenv
          become: true
        # Ensure the CentOS or RHEL packages are installed
        - name: Installing the CentOS or RHEL packages
          package:
            name: "{{ item }}"
            state: latest
          when: ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux"
          with_items:
            - python-devel
            - python-virtualenv
          become: true

        # Create a virtual Python environment.
        - name: Creating a virtual Python environment to install requirements
          command: virtualenv virtualenv

        # Need the OpenStack client to create a server that will install everything.
        - name: Installing the Python packages in the virtual environment
          # The version 3.12.0 has some errors when running these commands.
          shell: "virtualenv/bin/pip install -U {{ item }}"
          with_items:
            - pip
            - python-openstackclient==3.11.0
            - python-heatclient

        # Check the virtualenv for the openstack client
        - name: Checking the virtualenv for the openstack client
          stat:
            path: "virtualenv/bin/openstack"
          register: openstack_venv
          when: openstack_location == ""

        # When the file exists set the openstack location.
        - name: Setting the openstack client location to the virtualenv
          set_fact:
            openstack_location: "{{ openstack_venv.path }}"
          when: openstack_venv defined and openstack_venv.stat.exists and openstack_venv.stat.executable
      when: openstack_path.stdout == ""

    - name: Setting openstack location
      set_fact:
        openstack: "source {{ openstack_rc }}; {{ openstack_location|default('openstack') }}"

    # Create a router so the private network can connect to the Internet.
    - name: Creating the {{ router_name }} router
      shell: "{{ openstack }} router create {{ router_name }} --format value -c id"
      register: router_uuid
      ignore_errors: yes

    # Create a private network for the OpenStack servers to use.
    - name: Creating the {{ network_name }} network
      shell: "{{ openstack }} network create {{ network_name }} --format value -c id"
      register: private_network_uuid

    # Run a command to retrieve the public DNS nameservers already set up.
    - name: Get the dns_nameservers addresses from the {{ public_subnet_name }}
      shell: "{{ openstack }} subnet show {{ public_subnet_name }} --format value -c dns_nameservers"
      register: dns_nameservers

    # Create a subnet with a CIDR range and link it to the private network.
    - name: Creating the {{ subnet_name }} subnet
      shell: "{{ openstack }} subnet create --network {{ network_name }} --subnet-range {{ subnet_range }} {{ subnet_name }} --format value -c id"
      register: subnet_uuid

    # Set each DNS server on the subnet of the private network.
    - name: Set the DNS nameservers on {{ subnet_name }}
      shell: "{{ openstack }} subnet set --dns-nameserver {{ item }} {{ subnet_name }}"
      with_items: "{{ dns_nameservers.stdout }}"

    # The subnet is configured, add it to the router.
    - name: Adding {{ subnet_name }} subnet to the {{ router_name }} router
      shell: "{{ openstack }} router add subnet {{ router_name }} {{ subnet_uuid.stdout }}"

    # Run a command to retrieve the public network uuid.
    - name: Get the public network id
      shell: "{{ openstack }} network show {{ public_network_name }} --format value -c id"
      register: public_network_uuid

    # Set the gateway on the new router to use the public network.
    - name: Assign the public network as the gateway for the new router
      #shell: virtualenv/bin/neutron router-gateway-set {{ router_uuid.stdout }} {{ public_network_uuid.stdout }}
      shell: "{{ openstack }} router set {{ router_uuid.stdout }} --external-gateway {{ public_network_uuid.stdout }}"

    # Create a security group to hold all rules set in this script.
    - name: Creating {{ security_group_name }} security group for this server
      shell: "{{ openstack }} security group create {{ security_group_name }}"

    # Create the security group rule that allows ping (ICMP traffic).
    - name: Creating the security group rule that allows ping
      shell: "{{ openstack }} security group rule create --ingress --protocol icmp {{ security_group_name }}"
      ignore_errors: yes

    # Create the security group rule that allows ssh (TCP port 22).
    - name: Creating the security group rule that allows ssh
      shell: "{{ openstack }} security group rule create --ingress --protocol tcp --dst-port 22 {{ security_group_name }}"
      ignore_errors: yes

    # Create the security group rule that allows secure HTTP (TCP port 443).
    - name: Creating the security group for secure http
      shell: "{{ openstack }} security group rule create --ingress --protocol tcp --dst-port 443 {{ security_group_name }}"
      ignore_errors: yes

    # Create the floating ip address on the public network.
    - name: Creating a floating ip on the {{ public_network_name }}
      shell: "{{ openstack }} floating ip create {{ public_network_name }} --format value -c floating_ip_address"
      register: floating_ip_address

    # Add a keypair to OpenStack that allows access to the server.
    - name: Creating {{ keypair_name }} keypair to access this server
      shell: "{{ openstack }} keypair create --public-key {{ public_key_path }} {{ keypair_name }}"

    # Make sure the server flavor is created.
    - name: Creating flavor {{ server_flavor.name }}
      shell: "{{ openstack }} flavor create --public --ram {{ server_flavor.ram }} --disk {{ server_flavor.disk }} --vcpus {{ server_flavor.vcpus }} {{ server_flavor.name }}"

    # Create a VM instance with the flavor, image, group, keypair and network.
    - name: Creating a server instance {{ server_name }}
      shell: "{{ openstack }} server create --flavor {{ server_flavor.name }} --image {{ server_image }} --security-group {{ security_group_name }} --key-name {{ keypair_name }} {{ server_name }} --nic net-id={{ private_network_uuid.stdout }} --format value -c id"
      register: instance_uuid

      # Attempting to avoid error message: Instance network is not ready yet (HTTP 400)
    - name: Pausing to allow time for OpenStack to create the server and ready the network
      pause:
        seconds: 3

    # Add the floating ip address to the server.
    - name: Add the floating ip address {{ floating_ip_address.stdout }} to the server instance
      shell: "{{ openstack }} server add floating ip {{ server_name }} {{ floating_ip_address.stdout }}"

    # Use the wait_for module to wait until ssh access can be established.
    - name: Wait for the server {{ server_name }} to start
      local_action: wait_for
      args:
        host: "{{ floating_ip_address.stdout }}"
        port: 22
        state: started
        delay: 5
        timeout: 300

    # Print out the ssh connection command to the new server.
    - name: Print the command to connect to the server instance
      debug:
        msg: "ssh -i {{ private_key_path }} {{ server_user }}@{{ floating_ip_address.stdout }}"

    # Print out the command to set up the host with Ansible and other prereqs.
    - name: Print the command for setting up the host to use Ansible.
      debug:
        msg: "ansible-playbook install_server_dependencies.yml -v --ssh-common-args='-i {{ private_key_path }}' -u {{ server_user }} -i {{ floating_ip_address.stdout }},"

    # Print out the command for the OpenStack and OpenShift config and install.
    - name: Print the command for configuring OpenShift on OpenStack
      debug:
        msg: "ansible-playbook openshift_on_openstack.yml -v --ssh-common-args='-i {{ private_key_path }}' -u {{ server_user }} -i {{ floating_ip_address.stdout }},"
