---
- name: Set up one virtual machine server in a new OpenStack environment
  hosts: openstack-server
  vars:
    ec2_flavors:
      # https://aws.amazon.com/ec2/previous-generation/
      - { name: m1.small, vcpu: 1, memory: 1740, disk: 40 }
      - { name: m1.medium, vcpu: 1, memory: 3840, disk: 80 }
      - { name: m1.large, vcpu: 2, memory: 7680, disk: 120 }
      # https://aws.amazon.com/ec2/instance-types/#m4
      - { name: m4.large, vcpu: 2, memory: 8192, disk: 50 }
      - { name: m4.xlarge, vcpu: 4, memory: 16384, disk: 100 }
      - { name: m4.2xlarge, vcpu: 8, memory: 32768, disk: 200 }
      - { name: m4.4xlarge, vcpu: 16, memory: 65536, disk: 300 }
      - { name: m4.10xlarge, vcpu: 40, memory: 163840, disk: 500 }
    install_directory: "{{ ansible_user_dir }}/scale-ci"
    keypair_name: "{{ lookup('env', 'keypair_name') | default('ci_keypair', true) }}"
    network_name: "{{ lookup('env', 'network_name') | default('ci_network', true) }}"
    ocp_major_minor: "{{ lookup('env', 'ocp_major_minor') | default('3.7', true) }}"
    openshift_flavors:
      - { name: container_storage, vcpu: 16, memory: 65536, disk: 128 }
      - { name: load_balancer, vcpu: 4, memory: 16384, disk: 128 }
      - { name: infra_elastic, vcpu: 16, memory: 65536, disk: 128 }
      - { name: master_etcd, vcpu: 64, memory: 245760, disk: 512 }
      - { name: node_small, vcpu: 1, memory: 2048, disk: 32 }
      - { name: node_average, vcpu: 4, memory: 16384, disk: 64 }
    openstack_location: "{{ lookup('env', 'openstack_client_path' ) | default(install_directory ~ '/virtualenv/bin/openstack', true) }}"
    openstack_project: "{{ lookup('env', 'OS_PROJECT_NAME') }}"
    openstack_rc: "{{ lookup('env', 'openstack_rc_path') | default('~/overcloudrc', true) }}"
    private_key_path: "{{ lookup('env', 'private_key_path') | default(install_directory ~ '/key.private', true) }}"
    public_key_path: "{{ lookup('env', 'public_key_path') | default(install_directory ~ '/key.public', true) }}"
    public_network_name: "{{ lookup('env', 'public_network_name') | default('public_network', true) }}"
    public_subnet_name: "{{ lookup('env', 'public_subnet_name') | default('public_subnet', true) }}"
    quotas:
        { cores: 1444, gigabytes: 50000, instances: 550, ports: 10000, ram: 5865472, volumes: 50000 }
    router_name: "{{ lookup('env', 'router_name') | default('ci_router', true) }}"
    security_group_name: "{{ lookup('env', 'security_group_name') | default('ci_security_group', true) }}"
    server_flavor: "{{ lookup('env', 'server_flavor') | default('m1.medium', true) }}"
    server_image: "{{ lookup('env', 'server_image') | default('ocp-3.7-rhel', true) }}"
    server_name: "{{ lookup('env', 'server_name') | default('ansible-host', true) }}"
    subnet_name: "{{ lookup('env', 'subnet_name') | default('ci_subnet', true) }}"
    subnet_range: "{{ lookup('env', 'subnet_range') | default('192.168.4.0/24', true) }}"
    standard_flavors:
      # https://cloud.google.com/compute/docs/machine-types
      - { name: n1-standard-1, vcpu: 1, memory: 3750, disk: 32 }
      - { name: n1-standard-2, vcpu: 2, memory: 7500, disk: 64 }
      - { name: n1-standard-4, vcpu: 4, memory: 15000, disk: 64 }
      - { name: n1-standard-8, vcpu: 8, memory: 30000, disk: 128 }
      - { name: n1-standard-16, vcpu: 16, memory: 60000, disk: 128 }
      - { name: n1-standard-32, vcpu: 32, memory: 120000, disk: 256 }
      - { name: n1-standard-64, vcpu: 64, memory: 240000, disk: 256 }

  tasks:
    # Check for the existance of the OpenStack client.
    - name: Checking for the OpenStack client
      stat:
        path: "{{ openstack_location }}"
      register: openstack_path

    # Fail when the openstack client path does not exist.
    - name: Aborting because the OpenStack client does not exist
      fail:
        msg: "The openstack client path '{{ openstack_location }}' is invalid."
      when: openstack_path.stat.exists == false

    # The openstack variable includes the rc file and the path to the OpenStack client.
    - name: Setting openstack variable to source the rc file and contain path to client
      set_fact:
        openstack: "source {{ openstack_rc }}; {{ openstack_location }}"

    # Create a router so the private network can connect to the Internet.
    - name: Creating the {{ router_name }} router
      shell: "{{ openstack }} router create {{ router_name }} --format value -c id"
      register: router_uuid
      ignore_errors: yes

    # Create a private network for the OpenStack servers to use.
    - name: Creating the {{ network_name }} network
      shell: "{{ openstack }} network create {{ network_name }} --format value -c id"
      register: ci_network_uuid

    # Run a command to retrieve the public DNS nameservers already set up.
    - name: Getting the dns_nameservers addresses from the {{ public_subnet_name }}
      shell: "{{ openstack }} subnet show {{ public_subnet_name }} --format value -c dns_nameservers"
      register: dns_nameservers

    # Create a subnet with a CIDR range and link it to the private network.
    - name: Creating the {{ subnet_name }} subnet
      shell: "{{ openstack }} subnet create --network {{ ci_network_uuid['stdout'] }} --subnet-range {{ subnet_range }} {{ subnet_name }} --format value -c id"
      register: subnet_uuid

    # Set each DNS server on the subnet of the private network.
    - name: Setting the DNS nameservers on {{ subnet_name }}
      shell: "{{ openstack }} subnet set --dns-nameserver {{ item }} {{ subnet_uuid['stdout'] }}"
      with_items: "{{ dns_nameservers['stdout'].split(',') }}"

    # The subnet is configured, add it to the router.
    - name: Adding {{ subnet_name }} subnet to the {{ router_name }} router
      shell: "{{ openstack }} router add subnet {{ router_name }} {{ subnet_uuid['stdout'] }}"

    # Run a command to retrieve the public network uuid.
    - name: Getting the public network id
      shell: "{{ openstack }} network show {{ public_network_name }} --format value -c id"
      register: public_network_uuid

    # Set the gateway on the new router to use the public network.
    - name: Assigning the public network as the gateway for the new router
      #shell: virtualenv/bin/neutron router-gateway-set {{ router_uuid['stdout'] }} {{ public_network_uuid['stdout'] }}
      shell: "{{ openstack }} router set {{ router_uuid['stdout'] }} --external-gateway {{ public_network_uuid['stdout'] }}"

    # Create a security group to hold all rules set in this script.
    - name: Creating {{ security_group_name }} security group for this server
      shell: "{{ openstack }} security group create {{ security_group_name }} --format value -c id"
      register: security_group_uuid

    # Create the security group rule that allows ping (ICMP traffic).
    - name: Creating the security group rule that allows ping
      shell: "{{ openstack }} security group rule create --ingress --protocol icmp {{ security_group_uuid['stdout'] }} --format value -c id"
      ignore_errors: yes

    # Create the security group rule that allows ssh (TCP port 22).
    - name: Creating the security group rule that allows ssh
      shell: "{{ openstack }} security group rule create --ingress --protocol tcp --dst-port 22 {{ security_group_uuid['stdout'] }} --format value -c id"
      ignore_errors: yes

    # Create the security group rule that allows secure HTTP (TCP port 443).
    - name: Creating the security group for secure http
      shell: "{{ openstack }} security group rule create --ingress --protocol tcp --dst-port 443 {{ security_group_uuid['stdout'] }} --format value -c id"
      ignore_errors: yes

    # Create the floating ip address on the public network.
    - name: Creating a floating ip on the {{ public_network_name }}
      shell: "{{ openstack }} floating ip create {{ public_network_name }} --format value -c floating_ip_address"
      register: address

    # Set the floating ip address as fact.
    - name: Setting the floating ip address variable
      set_fact:
        floating_ip_address: "{{ address['stdout'] }}"

    # Add a keypair to OpenStack that allows access to the server.
    - name: Creating {{ keypair_name }} keypair to access this server
      shell: "{{ openstack }} keypair create --public-key {{ public_key_path }} {{ keypair_name }} --format value -c fingerprint"

    # Create the flavors so the create server can specify a flavor.
    - name: Creating the flavors
      shell: "{{ openstack }} flavor create --ram {{ item['memory'] }} --disk {{ item['disk'] }} --vcpus {{ item['vcpu'] }} {{ item['name'] }} --format value -c id"
      with_items: "{{ ec2_flavors }} + {{ standard_flavors }} + {{ openshift_flavors }}"
      # Some OpenStack environments do not allow you to create public flavors.
      ignore_errors: true

    # Get the OpenStack project name.
    - name: Getting the OpenStack project name
      shell: "source {{ openstack_rc }}; echo -n $OS_PROJECT_NAME"
      register: project_name
      when: openstack_project == ""

    # Set the OpenStack project varaible.
    - name: Setting the OpenStack project variable
      set_fact:
        openstack_project: "{{ project_name.stdout }}"
      when: project_name.stdout != ""

    # Raise the quotas from the defaults if possible.
    - name: Setting the quotas for {{ openstack_project }}
      shell: "{{ openstack }} quota set --{{ item }} {{ quotas[ item ] }} {{ openstack_project }}"
      with_items:
        - cores
        - gigabytes
        - instances
        - ports
        - ram
        - volumes
      # Only set quotas when the project is defined.
      when: openstack_project != ""

    # Find the images to upload.
    - name: Searching for the ocp-{{ ocp_major_minor }} files in {{ install_directory }}
      find:
        paths: "{{ install_directory }}"
        patterns: "([0-9]+-[0-9]+-[0-9]+)-ocp-({{ ocp_major_minor }}.+)-.+qcow2"
        use_regex: yes
        recurse: true
      register: images

    # Delete any images with the same name as the one we are about to upload.
    - name: Deleting the existing images in OpenStack
      shell: "{{ openstack }} image delete ocp-{{ ocp_major_minor }}-{{ item }}"
      with_items: "{{ [ 'atomic', 'rhel' ] }}"
      # Do not fail if here is no image to delete.
      ignore_errors: true

    # Upload the images to Glance.
    - name: Uploading the images to OpenStack
      shell: "{{ openstack }} image create --disk-format qcow2 --container-format bare --file {{ item['path'] }} ocp-{{ ocp_major_minor }}-{{ ('atomic' in item['path'])|ternary('atomic','rhel') }} --format value -c id"
      with_items: "{{ images['files'] }}"
      register: create_result
      # Retry up to 3 times looking for a successful return code.
      until: create_result['rc'] == 0
      retries: 3
      delay: 5
      ignore_errors: yes

    # Add metadata to the OpenStack about the image.
    - name: Adding metadata about the image
      shell: "{{ openstack }} image set --property file_name={{ item['path']|basename }} --property directory={{ item['path']|dirname }} ocp-{{ ocp_major_minor }}-{{ ('atomic' in item['path'])|ternary('atomic','rhel') }}"
      with_items: "{{ images['files'] }}"

    # Create a VM instance with the flavor, image, group, keypair and network.
    - name: Creating a server instance {{ server_name }}
      shell: "{{ openstack }} server create --flavor {{ server_flavor }} --image {{ server_image }} --security-group {{ security_group_uuid['stdout'] }} --key-name {{ keypair_name }} {{ server_name }} --nic net-id={{ ci_network_uuid['stdout'] }} --format value -c id"
      register: instance_uuid

    # Add the floating ip address to the server.
    - name: Adding the floating ip address {{ floating_ip_address }} to the server instance
      # This command can fail with: Instance network is not ready yet (HTTP 400)
      shell: "{{ openstack }} server add floating ip {{ server_name }} {{ floating_ip_address }}"
      register: add_result
      until: add_result.rc == 0
      # Retry 5 times until success.
      retries: 5
      delay: 3
      ignore_errors: yes

    # Use the wait_for module to wait until ssh access can be established.
    - name: Waiting for the server {{ server_name }} to start
      wait_for:
        host: "{{ floating_ip_address }}"
        port: 22
        state: started
        delay: 5
        timeout: 300

    # Print out the ssh connection command to the new server.
    - name: Printing the ssh command to connect with the server instance
      debug:
        msg: "ssh -i {{ private_key_path }} {{ [server_image]['user'] }}@{{ floating_ip_address }}"

    # In some cases the "floating ip" is only accessible from the openstack-server.
    - name: Creating an ssh command that will use the openstack-server as a proxy
      set_fact:
        # The key path must be from the remote host not the openstack-server.
        proxy_command: "ssh -i {{ ansible_private_key_file }} -W %h:%p {{ ansible_user }}@{{ inventory_hostname }}"

    # Add the new host to the in-memory inventory.
    - name: Adding the newly generated floating IP address to the inventory
      add_host:
        name: "{{ floating_ip_address }}"
        groups: [ 'target-host' ]
        ansible_user: cloud-user
        # Adding a ProxyCommand allows servers to contact this IP using the openstack-server.
        ansible_ssh_common_args: "-o ProxyCommand='{{ proxy_command }}'"

    # Print out the line to add to inventory.
    - name: Printing the target host added to the inventory
      debug:
        msg: "[target-host]\n{{ floating_ip_address }} ansible_user=cloud-user"

    # Copy the OpenStack rc file to the target host.
    - name: Fetching the OpenStack rc file
      fetch:
        src: "{{ openstack_rc }}"
        flat: yes
        dest: "{{ install_directory }}/openstackrc"
