---
- name: The steps to set up one server in a new OpenStack environment.
  hosts: openstack-server
  vars:
    delete_images: true
    ec2_flavors:
      # https://aws.amazon.com/ec2/previous-generation/
      - { name: m1.small, vcpu: 1, memory: 1740, disk: 40 }
      - { name: m1.medium, vcpu: 1, memory: 3840, disk: 80 }
      - { name: m1.large, vcpu: 2, memory: 7680, disk: 120 }
      # https://aws.amazon.com/ec2/instance-types/#m4
      - { name: m4.large, vcpu: 2, memory: 8192, disk: 50 }
      - { name: m4.xlarge, vcpu: 4, memory: 16384, disk: 100 }
      - { name: m4.2xlarge, vcpu: 8, memory: 32768, disk: 200 }
      - { name: m4.4xlarge, vcpu: 16, memory: 65536, disk: 300 }
      - { name: m4.10xlarge, vcpu: 40, memory: 163840, disk: 500 }
    keypair_name: "{{ lookup('env', 'keypair_name') | default('ci_keypair', true) }}"
    network_name: "{{ lookup('env', 'network_name') | default('ci_network', true) }}"
    openstack_location: ""
    openstack_project: "{{ lookup('env', 'OS_PROJECT_NAME') }}"
    openstack_rc: "{{ lookup('env', 'openstack_rc_path') | default('~/overcloudrc', true) }}"
    private_key_path: "{{ lookup('env', 'private_key_path') | default(ansible_private_key_file, true) }}"
    public_key_path: "{{ lookup('env', 'public_key_path') | default(ansible_public_key_file, true) }}"
    public_network_name: "{{ lookup('env', 'public_network_name') | default('public_network', true) }}"
    public_subnet_name: "{{ lookup('env', 'public_subnet_name') | default('public_subnet', true) }}"
    quotas:
        { cores: 1444, gigabytes: 50000, instances: 550, ports: 10000, ram: 5865472, volumes: 50000 }
    router_name: "{{ lookup('env', 'router_name') | default('ci_router', true) }}"
    security_group_name: "{{ lookup('env', 'security_group_name') | default('ci_security_group', true) }}"
    server_flavor: "{{ lookup('env', 'server_flavor') | default('m1.medium', true) }}"
    server_image: "{{ lookup('env', 'server_image') | default('fedora-26', true) }}"
    server_name: "{{ lookup('env', 'server_name') | default('ansible-host', true) }}"
    subnet_name: "{{ lookup('env', 'subnet_name') | default('ci_subnet', true) }}"
    subnet_range: "{{ lookup('env', 'subnet_range') | default('192.168.4.0/24', true) }}"
    standard_flavors:
      # https://cloud.google.com/compute/docs/machine-types
      - { name: n1-standard-1, vcpu: 1, memory: 3750, disk: 32 }
      - { name: n1-standard-2, vcpu: 2, memory: 7500, disk: 64 }
      - { name: n1-standard-4, vcpu: 4, memory: 15000, disk: 64 }
      - { name: n1-standard-8, vcpu: 8, memory: 30000, disk 128 }
      - { name: n1-standard-16, vcpu: 16, memory: 60000, disk: 128 }
      - { name: n1-standard-32, vcpu: 32, memory: 120000, disk: 256 }
      - { name: n1-standard-64, vcpu: 64, memory: 240000, disk: 256 }
    openshift_flavors:
      - { name: container_storage, vcpu: 16, memory: 65536, disk: 128 }
      - { name: load_balancer, vcpu: 4, memory: 16384, disk: 128 }
      - { name: infra_elastic, vcpu: 16, memory: 65536, disk: 128 }
      - { name: master_etcd, vcpu: 64, memory: 245760, disk: 512 }
      - { name: node_small, vcpu: 1, memory: 2048, disk: 32 }
      - { name: node_average, vcpu: 4, memory: 16384, disk: 64 }
    images:
      fedora-26:
        md5sum: d8e3cd3512cb1cf71720e4bb33671a2a
        sha256sum: sha256:37a621dda65b04e8b6eee207088ff7697795cb2affdac13ed77166453989557c
        url: https://download.fedoraproject.org/pub/fedora/linux/releases/26/CloudImages/x86_64/images/Fedora-Cloud-Base-26-1.5.x86_64.qcow2
        user: fedora
      centos-7:
        md5sum: 14cb34a3dcb30364631c689547dcd1bd
        sha256sum: sha256:97ea5a1f8468b1ae1cbded3a88dd69ad1572a2f3765e8ef54bca7ddcdcd9deee
        url: https://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud-1708.qcow2c
        user: centos
      rhel-7.4:
        md5sum: feb1a599deb59ade97dc0935fbb24c8c
        sha256sum: sha256:b9fd65e22e8d3eb82eecf78b36471109fa42ee46fc12fd2ba2fa02e663fd21ef
        url: http://download-node-02.eng.bos.redhat.com/released/RHEL-7/7.4/Server/x86_64/images/rhel-guest-image-7.4-191.x86_64.qcow2
        user: cloud-user
  tasks:

    - block:
        # Install the common operating system packages.
        - name: Install common packages
          package:
            name: "{{ item }}"
            state: latest
          with_items:
            - gcc
            - libselinux-python
            - redhat-rpm-config
          become: true
        # Ensure the Fedora packages are installed.
        - name: Installing the Fedora packages
          package:
            name: "{{ item }}"
            state: latest
          when: ansible_distribution == "Fedora"
          with_items:
            - python2-devel
            - python2-virtualenv
          become: true
        # Ensure the CentOS or RHEL packages are installed
        - name: Installing the CentOS or RHEL packages
          package:
            name: "{{ item }}"
            state: latest
          when: ansible_distribution == "CentOS" or ansible_distribution == "RedHat"
          with_items:
            - python-devel
            - python-virtualenv
          become: true

        # Create a virtual Python environment.
        - name: Creating a virtual Python environment to install requirements
          command: virtualenv virtualenv

        # Need the OpenStack client to create a server that will install everything.
        - name: Installing the Python packages in the virtual environment
          # The version 3.12.0 has some errors when running these commands.
          shell: "virtualenv/bin/pip install -U {{ item }}"
          with_items:
            - pip
            - python-openstackclient==3.11.0
            - python-heatclient

        # Check the virtualenv for the openstack client
        - name: Checking the virtualenv for the openstack client
          stat:
            path: "virtualenv/bin/openstack"
          register: openstack_venv

        # When the file exists set the openstack location.
        - name: Setting the openstack client location to the virtualenv
          set_fact:
            openstack_location: "{{ openstack_venv.stat.path }}"
          when: openstack_venv.stat.exists and openstack_venv.stat.executable

    # The openstack variable source the rc file and contain the path to client.
    - name: Setting openstack variable to source the rc file and contain path to client
      set_fact:
        openstack: "source {{ openstack_rc }}; {{ openstack_location|default('openstack') }}"

    # Create a router so the private network can connect to the Internet.
    - name: Creating the {{ router_name }} router
      shell: "{{ openstack }} router create {{ router_name }} --format value -c id"
      register: router_uuid
      ignore_errors: yes

    # Create a private network for the OpenStack servers to use.
    - name: Creating the {{ network_name }} network
      shell: "{{ openstack }} network create {{ network_name }} --format value -c id"
      register: ci_network_uuid

    # Run a command to retrieve the public DNS nameservers already set up.
    - name: Getting the dns_nameservers addresses from the {{ public_subnet_name }}
      shell: "{{ openstack }} subnet show {{ public_subnet_name }} --format value -c dns_nameservers"
      register: dns_nameservers

    # Create a subnet with a CIDR range and link it to the private network.
    - name: Creating the {{ subnet_name }} subnet
      shell: "{{ openstack }} subnet create --network {{ network_name }} --subnet-range {{ subnet_range }} {{ subnet_name }} --format value -c id"
      register: subnet_uuid

    # Set each DNS server on the subnet of the private network.
    - name: Setting the DNS nameservers on {{ subnet_name }}
      shell: "{{ openstack }} subnet set --dns-nameserver {{ item }} {{ subnet_name }}"
      with_items: "{{ dns_nameservers['stdout'].split(',') }}"

    # The subnet is configured, add it to the router.
    - name: Adding {{ subnet_name }} subnet to the {{ router_name }} router
      shell: "{{ openstack }} router add subnet {{ router_name }} {{ subnet_uuid['stdout'] }}"

    # Run a command to retrieve the public network uuid.
    - name: Getting the public network id
      shell: "{{ openstack }} network show {{ public_network_name }} --format value -c id"
      register: public_network_uuid

    # Set the gateway on the new router to use the public network.
    - name: Assigning the public network as the gateway for the new router
      #shell: virtualenv/bin/neutron router-gateway-set {{ router_uuid['stdout'] }} {{ public_network_uuid['stdout'] }}
      shell: "{{ openstack }} router set {{ router_uuid['stdout'] }} --external-gateway {{ public_network_uuid['stdout'] }}"

    # Create a security group to hold all rules set in this script.
    - name: Creating {{ security_group_name }} security group for this server
      shell: "{{ openstack }} security group create {{ security_group_name }} --format value -c id"

    # Create the security group rule that allows ping (ICMP traffic).
    - name: Creating the security group rule that allows ping
      shell: "{{ openstack }} security group rule create --ingress --protocol icmp {{ security_group_name }} --format value -c id"
      ignore_errors: yes

    # Create the security group rule that allows ssh (TCP port 22).
    - name: Creating the security group rule that allows ssh
      shell: "{{ openstack }} security group rule create --ingress --protocol tcp --dst-port 22 {{ security_group_name }} --format value -c id"
      ignore_errors: yes

    # Create the security group rule that allows secure HTTP (TCP port 443).
    - name: Creating the security group for secure http
      shell: "{{ openstack }} security group rule create --ingress --protocol tcp --dst-port 443 {{ security_group_name }} --format value -c id"
      ignore_errors: yes

    # Create the floating ip address on the public network.
    - name: Creating a floating ip on the {{ public_network_name }}
      shell: "{{ openstack }} floating ip create {{ public_network_name }} --format value -c floating_ip_address"
      register: address

    # Set the floating ip address as fact.
    - name: Setting the floating ip address variable
      set_fact:
        floating_ip_address: "{{ address['stdout'] }}"

    # Add a keypair to OpenStack that allows access to the server.
    - name: Creating {{ keypair_name }} keypair to access this server
      shell: "{{ openstack }} keypair create --public-key {{ public_key_path }} {{ keypair_name }} --format value -c fingerprint"

    # Create the flavors so the create server can specify a flavor.
    - name: Creating the flavors
      shell: "{{ openstack }} flavor create --ram {{ item['memory'] }} --disk {{ item['disk'] }} --vcpus {{ item['vcpu'] }} {{ item['name'] }} --format value -c id"
      with_items: "{{ ec2_flavors }} + {{ standard_flavors }} + {{ openshift_flavors }}"
      # Some openstack environments do not allow you to create public flavors.
      ignore_errors: true

    # Raise the quotas from the defaults if possible.
    - name: Setting the quotas for {{ openstack_project }}
      shell: "{{ openstack }} quota set --{{ item }} {{ quotas[ item ] }} {{ openstack_project }}"
      with_items:
        - cores
        - gigabytes
        - instances
        - ports
        - ram
        - volumes
      # Only set quotas when the project is defined.
      when: openstack_project != ""

    # Get the checksum (md5) of the image that is already in OpenStack.
    - name: Getting the checksum for the images in OpenStack
      shell: "{{ openstack }} image show {{ item }} --format value -c checksum"
      register: md5_checksums
      # Do not error if the image has not been uploaded yet.
      ignore_errors: true
      with_items: "{{ images }}"

    # Download the image only if you need to.
    - name: Downloading the VM images
      get_url:
        checksum: "{{ images[item[0]]['sha256sum'] }}"
        dest: "{{ playbook_dir }}/{{ item[0] }}"
        url: "{{ images[item[0]]['url'] }}"
      with_together:
        - "{{ images }}"
        - "{{ md5_checksums['results'] }}"
      # Download the image when the checksum from OpenStack does not match the md5.
      when: images[item[0]]['md5sum'] != item[1]['stdout']

    # Upload the images to OpenStack (Glance).
    - name: Uploading the images to OpenStack
      shell: "{{ openstack }} image create {{ item[0] }} --disk-format=qcow2 --container-format=bare --file {{ playbook_dir }}/{{ item[0] }} --format value -c id"
      with_together:
        - "{{ images }}"
        - "{{ md5_checksums['results'] }}"
      # Create image when the checksum from OpenStack does not match the md5.
      when: images[item[0]]['md5sum'] != item[1]['stdout']

    # Set the metadata so we know where the image was from.
    - name: Adding metadata about the images
      shell: "{{ openstack }} image set --property image_url={{ images[item]['url'] }} --property sha256sum={{ images[item]['sha256sum'] }} --property user={{ images[item]['user'] }} {{ item }}"
      with_items: "{{ images }}"
      ignore_errors: true

    # Optionally delete the VM images.
    - name: Deleting the downloaded VM images
      file:
        path: "{{ playbook_dir }}/{{ item }}"
        state: absent
      with_items: "{{ images }}"
      # Do not error if the delete fails.
      ignore_errors: true
      when: delete_images == true

    # Create a VM instance with the flavor, image, group, keypair and network.
    - name: Creating a server instance {{ server_name }}
      shell: "{{ openstack }} server create --flavor {{ server_flavor }} --image {{ server_image }} --security-group {{ security_group_name }} --key-name {{ keypair_name }} {{ server_name }} --nic net-id={{ ci_network_uuid['stdout'] }} --format value -c id"
      register: instance_uuid

    # Add the floating ip address to the server.
    - name: Adding the floating ip address {{ floating_ip_address }} to the server instance
      # This command can fail with: Instance network is not ready yet (HTTP 400)
      shell: "{{ openstack }} server add floating ip {{ server_name }} {{ floating_ip_address }}"
      register: add_result
      until: add_result.rc == 0
      # Retry 5 times until success.
      retries: 5
      delay: 3
      ignore_errors: yes

    # Use the wait_for module to wait until ssh access can be established.
    - name: Waiting for the server {{ server_name }} to start
      local_action: wait_for
      args:
        host: "{{ floating_ip_address }}"
        port: 22
        state: started
        delay: 5
        timeout: 300

    # Print out the ssh connection command to the new server.
    - name: Printing the ssh command to connect with the server instance
      debug:
        msg: "ssh -i {{ private_key_path }} {{ images[server_image]['user'] }}@{{ floating_ip_address }}"

    # Add the new host to the in memory inventory.
    - name: Adding the newly generated floating IP address to the inventory
      add_host:
        name: "{{ floating_ip_address }}"
        groups: [ 'target-host' ]
        ansible_user: "{{ images[server_image]['user'] }}"
        ansible_ssh_common_args: "-i {{ private_key_path }}"

    # Print out the line ot add to inventory.
    - name: Printing the target host added to the inventory
      debug:
        msg: "[target-host]\n{{ floating_ip_address }} ansible_user={{ images[server_image]['user'] }} ansible_ssh_common_args='-i {{ private_key_path }}'"

    # Print out the command to set up the host with Ansible and other prereqs.
    - name: Printing the command for setting up the host to use Ansible
      debug:
        msg: "ansible-playbook -v install_server_dependencies.yml"

    # Print out the command to install the OpenStack images.
    - name: Printing the command for copying the OpenStack images
      debug:
        msg: "ansible-playbook -v find_and_prepare_images.yml"

    # Print out the command for the OpenStack and OpenShift config and install.
    - name: Printing the command for configuring OpenShift on OpenStack
      debug:
        msg: "ansible-playbook -v openshift_on_openstack.yml"

# import_playbook to install the dependencies on the new host VM server.
- include: install_server_dependencies.yml

# import_playbook to run the image playbook on the image-server.
- include: find_and_prepare_images.yml

# import_playbook to run the OpenStack provision and OpenShift install from the VM server.
- include: openshift_on_openstack.yml
