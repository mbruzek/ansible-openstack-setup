---
- name: Configure openshift-ansible-contrib to run in this OpenStack environment
  hosts: target-host
  vars:
    env_id: "{{ lookup('env', 'env_id') | default('scale-ci', true) }}"
    image_name: "{{ lookup('env', 'image_name') | default('ocp-3.7-rhel') }}"
    keypair_name: "{{ lookup('env', 'keypair_name') | default('ci_keypair', true) }}"
    # The openshift-ansible repository to use if the code is not already on the host.
    openshift_ansible_repo: "{{ lookup('env', 'openshift_ansible_repo') | default('https://github.com/openshift/openshift-ansible', true) }}"
    # The version can be a branch, tag, or hash for testing pull requests.
    openshift_ansible_version: "{{ lookup('env', 'openshift_ansible_version') | default('HEAD', true) }}"
    # The openshift-ansible-contrib repository to use (required).
    openshift_ansible_contrib_repo: "{{ lookup('env', 'openshift_ansible_contrib_repo') | default('https://github.com/openshift/openshift-ansible-contrib', true) }}"
    # This version can be a branch, tag, or hash for testing pull requests.
    openshift_ansible_contrib_version: "{{ lookup('env', 'openshift_ansible_contrib_version') | default('HEAD', true) }}"
    openstack_rc: "{{ lookup('env', 'openstack_rc_path') | default('keystonerc', true) }}"
    public_network_name: "{{ lookup('env', 'public_network_name') | default('public_network', true) }}"
    public_subnet_name: "{{ lookup('env', 'public_subnet_name') | default('public_subnet', true) }}"

  tasks:
    # Remove all old directories and files.
    - name: Removing any old directories or files from previous attempts
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ ansible_user_dir }}/keystonerc"
        - "openshift-ansible"
        - "openshift-ansible-contrib"
        - "inventory"
        - "ansible.cfg"

    # Check if the server contains the openshift-ansible code already.
    - name: Checking file system status for the openshift-ansible directory
      stat:
        get_checksum: no
        get_md5: no
        path: "/root/openshift-ansible"
      register: openshift_ansible

    # Create a symbolic link to the openshift-ansible directory.
    - name: Creating a symbolic link to the openshift-ansible directory
      file:
        src: /root/openshift-ansible
        path: "{{ ansible_user_dir }}/openshift-ansible"
        state: link
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      become: true
      when: openshift_ansible['stat']['exists']

    # Print the values that will be used for the openshift-ansible repository.
    - name: Printing the values used to clone openshift-ansible
      debug:
        msg: "openshift-ansible repository: {{ openshift_ansible_repo }} {{ openshift_ansible_version }}"
      when: openshift_ansible['stat']['exists'] == false

    # Get a fresh clone of the openshift-ansible GitHub project.
    - name: Cloning the openshift-ansible repository
      git:
        dest: "{{ ansible_user_dir }}/openshift-ansible"
        # Specify a different repo to test someone else's repository.
        repo: "{{ openshift_ansible_repo }}"
        # Specify a version for a different branch, tag, or hash to verify PRs.
        version: "{{ openshift_ansible_version }}"
      when: openshift_ansible['stat']['exists'] == false

    # Print the values that will be used for openshift-ansible-contrib.
    - name: Printing the values used to clone openshift-ansible-contrib
      debug:
        msg: "openshift-ansible-contrib repository: {{ openshift_ansible_contrib_repo }} {{ openshift_ansible_contrib_version }}"

    # Get a fresh clone of the openshift-ansible-contrib GitHub project.
    - name: Cloning the openshift-ansible-contrib repository
      git:
        dest: "{{ ansible_user_dir }}/openshift-ansible-contrib"
        # Specify a different repo to test someone else's repository.
        repo: "{{ openshift_ansible_contrib_repo }}"
        # Specify a version for a different branch, tag, or hash to verify PRs.
        version: "{{ openshift_ansible_contrib_version }}"

    # Set the contrib playbooks provisioning openstack path.
    - name: Creating the openshift_openstack directory variable
      set_fact:
        openshift_openstack_dir: "openshift-ansible-contrib/playbooks/provisioning/openstack"

    # Install the ansible-galaxy requirements.
    - name: Running the ansible-galaxy install command
      command: "ansible-galaxy install -r {{ openshift_openstack_dir }}/galaxy-requirements.yaml -p openshift-ansible-contrib/roles"

    # Copy the remote sample-inventory to another remote directory.
    - name: Copying the sample inventory directory
      # Note: The copy module does not support recurisve copy of remote sources.
      command: cp -r {{ openshift_openstack_dir }}/sample-inventory/ inventory

    # Copy the Ansible configuration file from the inventory directory.
    - name: Copying the Ansible configuration file from inventory
      copy:
        remote_src: true
        src: inventory/ansible.cfg
        dest: ./ansible.cfg

    # Remove the ansible.cfg file.
    - name: Removing the Ansible configuration file
      file:
        path: inventory/ansible.cfg
        state: absent

    # Create a .ssh directory if one does not already exist.
    - name: Creating the .ssh directory
      file:
        path: "{{ ansible_user_dir }}/.ssh"
        state: directory
        mode: 0700

    # Copy the private key so this server can access the OpenShift servers.
    - name: Copying the private key to the system
      copy:
        src: "{{ ansible_private_key_file }}"
        dest: "{{ ansible_user_dir }}/.ssh/openshift"
        mode: 0600

    # Copy the public key so this server.
    - name: Copying the public key to the system
      copy:
        src: "{{ ansible_public_key_file }}"
        dest: "{{ ansible_user_dir }}/.ssh/openshift.pub"
        mode: 0644

    # Copy the rc file so the host can talk to OpenStack.
    - name: Copying the OpenStack rc file to {{ ansible_user_dir }}/keystonerc
      copy:
        dest: "{{ ansible_user_dir }}/keystonerc"
        src: "{{ openstack_rc }}"

    # Add an authentication block to the end of the OSEv3 file.
    - name: Adding authentication information to the end of the OSEv3.yml file
      blockinfile:
        backup: yes
        block: "{{ lookup('file', 'templates/auth_block.yml') }}"
        insertafter: EOF
        path: inventory/group_vars/OSEv3.yml

    # Set the env_id value by replacing the line.
    - name: Setting env_id to {{ env_id }} in all.yml
      lineinfile:
        path: inventory/group_vars/all.yml
        regexp: "^env_id.*"
        line: "env_id: \"{{ env_id }}\""

    # Get the public_dns_nameservers value from the Ansible variable.
    - name: Setting the public_dns_nameservers in all.yml
      lineinfile:
        path: inventory/group_vars/all.yml
        regexp: "^public_dns_nameservers.*"
        line: "public_dns_nameservers: [{{ public_dns_nameservers | default('8.8.8.8', true) }}]"

    # Set the Nova keypair for the installer to use.
    - name: Setting openstack_ssh_public_key to {{ keypair_name }} in all.yml
      lineinfile:
        path: inventory/group_vars/all.yml
        regexp: "^openstack_ssh_public_key.*"
        line: "openstack_ssh_public_key: \"{{ keypair_name }}\""

    # Set the external (public) network name.
    - name: Setting openstack_external_network_name to {{ public_network_name }} in all.yml
      lineinfile:
        path: inventory/group_vars/all.yml
        regexp: "^openstack_external_network_name.*"
        line: "openstack_external_network_name: \"{{ public_network_name }}\""

    # Set the default image name.
    - name: Setting openstack_default_image_name to {{ image_name }} in all.yml
      lineinfile:
        path: inventory/group_vars/all.yml
        regexp: "^openstack_default_image_name.*"
        line: "openstack_default_image_name: \"{{ image_name }}\""

    # Set the number of masters.
    - name: Setting openstack_num_masters to 3 in all.yml
      lineinfile:
        path: inventory/group_vars/all.yml
        regexp: "^openstack_num_masters.*"
        line: "openstack_num_masters: 3"

    # Set the number of infrastructure systems.
    - name: Setting openstack_num_infra to 3 in all.yml
      lineinfile:
        path: inventory/group_vars/all.yml
        regexp: "^openstack_num_infra.*"
        line: "openstack_num_infra: 3"

    # Set the absolute path to the private key.
    - name: Setting openstack_private_ssh_key in all.yml
      lineinfile:
        path: inventory/group_vars/all.yml
        regexp: "^#openstack_private_ssh_key.*"
        line: "openstack_private_ssh_key: {{ ansible_user_dir }}/.ssh/openshift"

    # Do not use Cinder volumes. TODO: Remove this once Cinder is working.
    - name: Setting ephemeral_volumes to true in all.yml
      lineinfile:
        path: inventory/group_vars/all.yml
        regexp: "^# ephemeral_volumes.*"
        line: "ephemeral_volumes: true"

    # Set a variable for the ansible-playbook.
    - name: Setting ansible-playbook variable
      set_fact:
        ansible_playbook: "source {{ ansible_user_dir }}/keystonerc; ansible-playbook"

    # Run the Ansible playbook that installs OpenStack.
    - name: Running the OpenStack install
      shell: "{{ ansible_playbook }} -vv {{ openshift_openstack_dir }}/provision.yaml 2>&1 > openstack_provision_log.txt"
      args:
        # Use bash to get the posix style redirects.
        executable: /bin/bash

    # Run the Ansible playbook that installs OpenShift.
    - name: Running the OpenShift install
      shell: "{{ ansible_playbook }} -vv openshift-ansible/playbooks/byo/config.yml 2>&1 > openshift_install_log.txt"
      args:
        # Use bash to get the posix style redirects.
        executable: /bin/bash

    # Print out the log file locations.
    - name: Printing out the log file locations
      debug:
        msg: "Installation complete, check the openstack_provision_log.txt and openshift_install_log.txt for errors."
