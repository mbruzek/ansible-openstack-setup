---
- name: Configure openshift-ansible-contrib to run in this OpenStack environment
  hosts: target-host
  vars:
    env_id: "{{ lookup('env', 'env_id') | default('demo', true) }}"
    keypair_name: "{{ lookup('env', 'keypair_name') }}"
    ocp_major_minor: 3.7
    openstack_rc_path: "{{ lookup('env', 'openstack_rc_path') }}"
    # This variable can be used test other people's repositories.
    openshift_ansible_repo: "{{ lookup('env', 'openshift_ansible_repo') | default('https://github.com/openshift/openshift-ansible', true) }}"
    # This variable can be a branch, tag, or hash for testing pull requests.
    openshift_ansible_version: "{{ lookup('env', 'openshift_ansible_version') | default('HEAD', true) }}"
    # This variable can be used to test other people's repositories.
    openshift_ansible_contrib_repo: "{{ lookup('env', 'openshift_ansible_contrib_repo') | default('https://github.com/openshift/openshift-ansible-contrib', true) }}"
    # This variable can be a branch, tag, or hash for testing pull requests.
    openshift_ansible_contrib_version: "{{ lookup('env', 'openshift_ansible_contrib_version') | default('HEAD', true) }}"
    private_key_path: "{{ lookup('env', 'private_key_path') }}"
    public_key_path: "{{ lookup('env', 'public_key_path') }}"
    public_network_name: "{{ lookup('env', 'public_network_name') }}"
    public_subnet_name: "{{ lookup('env', 'public_subnet_name') }}"
    target_image_directory: /tmp

  tasks:
    # Remove all old directories and files.
    - name: Remove any old directories or files from previous attempts
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "keystonerc"
        - "openshift-ansible-contrib"
        - "openshift-ansible"
        - "inventory"
        - "ansible.cfg"

    # Get a fresh clone of the openshift-ansible GitHub project.
    - name: Cloning the openshift-ansible repository
      git:
        dest: "{{ playbook_dir }}/openshift-ansible"
        # Specify a different repo to test someone else's repository.
        repo: "{{ openshift_ansible_repo }}"
        # Specify a version for a different branch, tag, or hash to verify PRs.
        version: "{{ openshift_ansible_version }}"

    # Get a fresh clone of the openshift-ansible-contrib GitHub project.
    - name: Cloning the openshift-ansible-contrib repository
      git:
        dest: "{{ playbook_dir }}/openshift-ansible-contrib"
        # Specify a different repo to test someone else's repository.
        repo: "{{ openshift_ansible_contrib_repo }}"
        # Specify a version for a different branch, tag, or hash to verify PRs.
        version: "{{ openshift_ansible_contrib_version }}"

    # Set a variable.
    - name: Create the directory fact
      set_fact:
        openshift_openstack_dir: "openshift-ansible-contrib/playbooks/provisioning/openstack"

    # Install the galaxy requirements.
    - name: Run the galaxy install command
      command: ansible-galaxy install -r {{ openshift_openstack_dir }}/galaxy-requirements.yaml -p openshift-ansible-contrib/roles

    # Copy the remote sample-inventory to another remote directory.
    - name: Copying the sample inventory directory
      # Note: The copy module does not support recurisve copy of remote sources.
      command: cp -r {{ openshift_openstack_dir }}/sample-inventory/ inventory

    # Copy the Ansible configuration file from the inventory directory.
    - name: Copying the Ansible configuration file from inventory
      copy:
        remote_src: true
        src: inventory/ansible.cfg
        dest: ./ansible.cfg

    # Remove the ansible.cfg file.
    - name: Removing the Ansible configuration file
      file:
        path: inventory/ansible.cfg
        state: absent

    # Create a .ssh directory if one does not already exist.
    - name: Creating the .ssh directory
      file:
        path: "{{ ansible_user_dir }}/.ssh"
        state: directory
        mode: 0700

    # Copy the private key so this server can access the OpenShift servers.
    - name: Copying the private key to the system
      copy:
        src: "{{ private_key_path }}"
        dest: "{{ ansible_user_dir }}/.ssh/id_rsa"
        mode: 0600

    # Copy the public key so this server.
    - name: Copying the public key to the system
      copy:
        src: "{{ public_key_path }}"
        dest: "{{ ansible_user_dir }}/.ssh/id_rsa.pub"
        mode: 0644

    # Copy the rc file so the host can talk to OpenStack.
    - name: Copying the OpenStack rc file to {{ ansible_user_dir }}/keystonerc
      copy:
        src: "{{ openstack_rc_path }}"
        dest: "{{ ansible_user_dir }}/keystonerc"

    # Get the path to the OpenStack client.
    - name: Finding the path to the OpenStack client
      command: "which openstack"
      register: openstack_path

    # Set the OpenStack variable correctly.
    - name: Setting the OpenStack variables
      set_fact:
        source_rc: "source ~/keystonerc"
        openstack: "source ~/keystonerc; {{ openstack_path.stdout }}"

    # Find the images to upload.
    - name: Searching for the ocp-{{ ocp_major_minor }} files in {{ target_image_directory }}
      find:
        paths: "{{ target_image_directory }}"
        patterns: "([0-9]+-[0-9]+-[0-9]+)-ocp-({{ ocp_major_minor }}.+)-.+qcow2"
        use_regex: yes
        recurse: true
      register: images

    # Delete any images with the same name as the one we are about to upload.
    - name: Deleting any existing images in OpenStack
      shell: "{{ openstack }} image delete ocp-{{ ocp_major_minor }}-{{ item }}"
      with_items: "{{ [ 'atomic', 'rhel' ] }}"
      ignore_errors: true

    # Upload the images to OpenStack (Glance).
    - name: Uploading the images to OpenStack
      shell: "{{ openstack }} image create --disk-format qcow2 --container-format bare --file {{ item.path }} ocp-{{ ocp_major_minor }}-{{ ('atomic' in item.path)|ternary('atomic','rhel') }} --format value -c id"
      with_items: "{{ images.files }}"
      register: create_result
      # Retry up to 3 times looking for a successful return code.
      until: create_result.rc == 0
      retries: 3
      delay: 5
      ignore_errors: yes

    # Add metadata to the OpenStack about the image.
    - name: Adding metadata about the image
      shell: "{{ openstack }} image set --property file_name={{ item.path|basename }} --property directory={{ item.path|dirname }} ocp-{{ ocp_major_minor }}-{{ ('atomic' in item.path)|ternary('atomic','rhel') }}"
      with_items: "{{ images.files }}"

    # Get the public DNS servers from OpenStack.
    - name: Getting the public DNS servers from OpenStack
      shell: "{{ openstack }} subnet show {{ public_subnet_name }} --format value -c dns_nameservers"
      register: dns_servers

    # Format the output from the command to a csv list.
    - name: Creating a variable with comma separated list of DNS servers
      set_fact:
        public_dns_nameservers: "{{ dns_servers.stdout }}"

    # Render the all.yml template, replacing variables with current values.
    - name: Rendering the all.yml template
      template:
        src: templates/all.yml.j2
        dest: inventory/group_vars/all.yml

    # Copy the OSEv3.yml file, replacing the existing OSEv3.yml file.
    - name: Copying the OSEv3.yml template
      copy:
        src: templates/OSEv3.yml
        dest: inventory/group_vars/OSEv3.yml

    # Run the Ansible playbook that installs OpenStack.
    - name: Running the OpenStack install
      shell: "{{ source_rc }}; ansible-playbook {{ openshift_openstack_dir }}/provision.yaml 2>&1 > openstack_provision_log.txt"
      args:
        # Use bash to get the posix style redirects.
        executable: /bin/bash

    # Run the Ansible playbook that installs OpenShift.
    - name: Running the OpenShift install
      shell: "{{ source_rc }}; ansible-playbook openshift-ansible/playbooks/byo/config.yml 2>&1 > openshift_install_log.txt"
      args:
        # Use bash to get the posix style redirects.
        executable: /bin/bash

    # Print out the log file locations.
    - name: Printing out the log file locations
      debug:
        msg: "Installation complete, check the openstack_provision_log.txt and openshift_install_log.txt for errors."
