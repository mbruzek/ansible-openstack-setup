---
- name: Steps to clean up an OpenStack environment
  hosts: openstack-server
  vars:
    keypair_name: "{{ lookup('env', 'keypair_name') | default('ci_keypair', true) }}"
    network_name: "{{ lookup('env', 'network_name') | default('ci_network', true) }}"
    openstack_location: "{{ lookup('env', 'openstack_client_path' ) | default('virtualenv/bin/openstack', true) }}"
    openstack_rc: "{{ lookup('env', 'openstack_rc_path') | default('~/overcloudrc', true) }}"
    router_name: "{{ lookup('env', 'router_name') | default('ci_router', true) }}"
    security_group_name: "{{ lookup('env', 'security_group_name') | default('ci_security_group', true) }}"
    server_name: "{{ lookup('env', 'server_name') | default('ansible-host', true) }}"
    subnet_name: "{{ lookup('env', 'subnet_name') | default('ci_subnet', true) }}"

  vars_prompt:
    - name: "delete_flavors"
      prompt: "Delete the flavors? "
      default: no
      private: no
    - name: "delete_images"
      prompt: "Delete the images? "
      default: no
      private: no

  tasks:
    # Check for the existance of the OpenStack client.
    - name: Checking for the OpenStack client
      stat:
        path: "{{ openstack_location }}"
      register: openstack_path

    # When the virtual enviornment does not exist try openstack from PATH.
    - name: Reverting to the default openstack client
      set_fact:
        openstack_location: openstack
      when: openstack_path.stat.exists == false

    # This variable includes rc file and the path to the OpenStack client.
    - name: Setting a variable to source the rc file and contain path to the OpenStack client
      set_fact:
        openstack: "source {{ openstack_rc }}; {{ openstack_location }}"

    # Get the server ids that match the name.
    - name: Getting the server IDs that match the {{ server_name }}
      shell: "{{ openstack }} server list --name {{ server_name }} --format value -c ID"
      register: servers
      ignore_errors: true

    # Delete the servers.
    - name: Deleting the matching servers
      shell: "{{ openstack }} server delete {{ item }}"
      with_items: "{{ servers.stdout_lines }}"

    # Delete the keypair.
    - name: Deleting the {{ keypair_name }} keypair
      shell: "{{ openstack }} keypair delete {{ keypair_name }}"
      ignore_errors: true

    # Get the flavor ids.
    - name: Getting all the flavor ids
      shell: "{{ openstack }} flavor list --format value -c ID"
      register: flavors
      ignore_errors: true
      when: delete_flavors | bool == true

    # Delete the flavors.
    - name: Deleting all the flavors
      shell: "{{ openstack }} flavor delete {{ item }}"
      with_items: "{{ flavors.stdout_lines }}"
      # Some OpenStack environments do not let anyone delete flavors.
      ignore_errors: true
      when: delete_flavors | bool == true

    # Get the floating ips.
    - name: Getting all the floaing ip addresses
      shell: "{{ openstack }} floating ip list --format value -c ID"
      register: floating_ips

    # Delete the floating ips.
    - name: Deleting all the floating ip addresses
      shell: "{{ openstack }} floating ip delete {{ item }}"
      with_items: "{{ floating_ips.stdout_lines }}"

    # Delete the security group.
    - name: Deleting the security group {{ security_group_name }}
      shell: "{{ openstack }} security group delete {{ security_group_name }}"
      ignore_errors: true

    # Get the router ids.
    - name: Getting the routers named {{ router_name }}
      shell: "{{ openstack }} router list --name {{ router_name }} --format value -c ID"
      register: routers

    # Get the subnet ids.
    - name: Getting the subnets named {{ subnet_name }}
      shell: "{{ openstack }} subnet list --name {{ subnet_name }} --format value -c ID"
      register: subnets

    # Remove the subnet from the router.
    - name: Removing the subnet from the router
      shell: "{{ openstack }} router remove subnet {{ item.0 }} {{ item.1 }}"
      with_nested:
        - "{{ routers.stdout_lines }}"
        - "{{ subnets.stdout_lines }}"
      ignore_errors: true

    # Delete the subnet.
    - name: Deleting the subnet {{ subnet_name }}
      shell: "{{ openstack }} subnet delete {{ item }}"
      with_items: "{{ subnets.stdout_lines }}"

    # Get the network ids.
    - name: Getting the networks named {{ network_name }}
      shell: "{{ openstack }} network list --name {{ network_name }} --format value -c ID"
      register: networks

    # Delete the networks.
    - name: Deleting all the networks named {{ network_name }}
      shell: "{{ openstack }} network delete {{ item }}"
      with_items: "{{ networks.stdout_lines }}"

    # Get the router ids.
    - name: Getting the routers named {{ router_name }}
      shell: "{{ openstack }} router list --name {{ router_name }} --format value -c ID"
      register: routers

    # Delete the routers.
    - name: Deleting all the routers
      shell: "{{ openstack }} router delete {{ item }}"
      with_items: "{{ routers.stdout_lines }}"

    # Get the images.
    - name: Getting all the images
      shell: "{{ openstack }} image list --format value -c ID"
      register: images
      ignore_errors: true
      when: delete_images | bool == true

    # Delete the images.
    - name: Deleting all the images
      shell: "{{ openstack }} image delete {{ item }}"
      with_items: "{{ images.stdout_lines }}"
      ignore_errors: true
      when: delete_images | bool == true
