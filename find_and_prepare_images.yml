---
- name: Find and prepare the images to copy
  hosts: image-server
  vars:
    delete_qcow2_images: false
    files: []
    image_directory: image_builder/qcow_images
    ocp_major_minor: 3.7
    target_image_directory: /tmp
    web_root: /var/www/html

  tasks:
    # Get all the atomic files matching the pattern.
    - name: Searching for the ocp-{{ ocp_major_minor }} files in {{ image_directory }}/atomic
      find:
        paths: "{{ image_directory }}/atomic"
        patterns: "([0-9]+-[0-9]+-[0-9]+)-ocp-({{ ocp_major_minor }}.+)-.+raw"
        use_regex: yes
      register: atomic_images

    # Reverse sort by mtime and the first file is the latest atomic image.
    - name: Finding the latest atomic file
      set_fact:
        # mtime = Time of last modification.
        atomic_image: "{{ atomic_images.files|sort(attribute='mtime',reverse=true)|first }}"

    # Get all the rhel files matching the pattern.
    - name: Searching for the ocp-{{ ocp_major_minor }} files in {{ image_directory }}/rhel
      find:
        paths: "{{ image_directory }}/rhel"
        patterns: "([0-9]+-[0-9]+-[0-9]+)-ocp-({{ ocp_major_minor }}.+)-.+raw"
        use_regex: yes
      register: rhel_images

    # Reverse sort by mtime and the first file is the latest rhel image.
    - name: Finding the latest rhel file
      set_fact:
        # mtime = Time of last modification.
        rhel_image: "{{ rhel_images.files|sort(attribute='mtime',reverse=true)|first }}"

    - name: Creating the files variable
      set_fact:
        files: "{{ [ atomic_image.path, rhel_image.path ] }}"

    # Create the transfer directories to ensure they exist.
    - name: Creating the transfer directories on the image server
      file:
        path: "{{ web_root }}/{{ item|dirname }}"
        state: directory
      with_items: "{{ files }}"

    # Get the disk usage numbers.
    - name: Getting the disk usage information from the image server
      command: "df --output=avail,pcent {{ web_root }}"
      register: disk_space

    # Print the disk usage information.
    - name: Printing the disk usage information of the image server
      debug:
        msg: "{{ disk_space.stdout_lines[1] }}"

    # Parse the disk usage output.
    - name: Setting the disk usage variables
      set_fact:
        bytes_available: "{{ disk_space.stdout_lines[1].split()[0] }}"
        percent_used: "{{ (disk_space.stdout_lines[1].split()[1])[:-1] }}"

    # Warn if the image server is above a threshold.
    - name: Checking the disk space threshold
      debug:
        msg: "WARNING: The image server {{ inventory_hostname }} is over 99% full!"
      when: "percent_used | int >= 99"

    # Get all the atomic files in the web_root matching the pattern.
    - name: Searching for all files in {{ web_root }}/{{ image_directory }}/atomic
      find:
        paths: "{{ web_root }}/{{ image_directory }}/atomic"
      register: atomic_qcow2_images

    # Get all the rhel files in the web_root matching the pattern.
    - name: Searching for all files in {{ web_root }}/{{ image_directory }}/rhel
      find:
        paths: "{{ web_root }}/{{ image_directory }}/rhel"
      register: rhel_qcow2_images

    # Sort the images by mtime and take the first image.
    - name: Finding the oldest atomic and rhel qcow2 images
      set_fact:
        oldest_atomic_qcow2_image: "{{ atomic_qcow2_images.files|sort(attribute='mtime')|first }}"
        oldest_rhel_qcow2_image: "{{ rhel_qcow2_images.files|sort(attribute='mtime')|first }}"

    # Optionally delete the oldest images.
    - name: Deleting the oldest images
      file:
        path: "{{ item.path }}"
        state: absent
      with_items: "[ {{ oldest_atomic_qcow2_image }}, {{ oldest_rhel_qcow2_image }}]"
      when: delete_qcow2_images

    # Check for the atomic qcow2 image of the same basename.
    - name: Checking if the atomic qcow2 file already exists
      stat:
        path: "{{ web_root }}/{{ (atomic_image.path|splitext)[0] }}.qcow2"
      register: atomic_qcow2

    # Check for the rhel qcow2 image of the same basename.
    - name: Checking if the rhel qcow2 file already exists
      stat:
        path: "{{ web_root }}/{{ (rhel_image.path|splitext)[0] }}.qcow2"
      register: rhel_qcow2

    # Convert the raw images to qcow2 when images do not exist
    - name: Converting and compressing the images for transport
      # qemu-img convert -c -O qcow2 path/image_name.raw path/image_name.qcow2
      command: "qemu-img convert -c -O qcow2 {{ item }} {{ web_root }}/{{ (item|splitext)[0] }}.qcow2"
      with_items: "{{ files }}"
      when: atomic_qcow2.stat.exists == false or rhel_qcow2.stat.exists == false

    # Create the image directories on the target host.
    - name: Creating the image directories on the target host
      file:
        path: "{{ target_image_directory }}/{{ item|dirname }}"
        state: directory
      with_items: "{{ files }}"
      delegate_to: "{{ groups['target-host'][0] }}"

    # Copy the images from image server to the target host.
    - name: Copying the files from the image server to the target host
      get_url:
        dest: "{{ target_image_directory }}/{{ (item|splitext)[0] }}.qcow2"
        url: "http://{{ groups['image-server'][0] }}/{{ (item|splitext)[0] }}.qcow2"
      with_items: "{{ files }}"
      delegate_to: "{{ groups['target-host'][0] }}"
