---
- name: Copy the images to glance
  hosts: all
  vars:
    atomic_image_directory: image_builder/qcow_images/atomic
    delete_qcow2_images: false
    files: []
    ocp_major_minor: 3.7
    openstack_rc: "{{ lookup('env', 'openstack_rc_path') }}"
    openstack: source {{ openstack_rc }}; virtualenv/bin/openstack
    rhel_image_directory: image_builder/qcow_images/rhel
    local_image_directory: /tmp

  tasks:
    # Get all the all the atomic files matching the pattern.
    - name: Find files matching the version in {{ atomic_image_directory }}
      find:
        paths: "{{ atomic_image_directory }}"
        patterns: "([0-9]+-[0-9]+-[0-9]+)-ocp-({{ ocp_major_minor }}.+)-.+raw"
        use_regex: yes
      register: atomic_images

    # Only need the latest atomic file.
    - name: Get the latest atomic file
      set_fact:
        # mtime = Time of last modification.
        atomic_image: "{{ atomic_images.files|sort(attribute='mtime',reverse=true)|first }}"

    # Check for the atomic qcow2 image of the same basename.
    - name: Checking if the atomic qcow2 file already exists
      stat:
        path: "{{ (atomic_image.path|splitext)[0] }}.qcow2"
      register: atomic_qcow2

    # Get all the rhel files matching the pattern.
    - name: Find files matching the version in {{ rhel_image_directory }}
      find:
        paths: "{{ rhel_image_directory }}"
        patterns: "([0-9]+-[0-9]+-[0-9]+)-ocp-({{ ocp_major_minor }}.+)-.+raw"
        use_regex: yes
      register: rhel_images

    # Only need the latest rhel file.
    - name: Get the latest rhel file
      set_fact:
        # mtime = Time of last modification.
        rhel_image: "{{ rhel_images.files|sort(attribute='mtime',reverse=true)|first }}"

    # Cehck for the rhel qcow2 image of the same basename.
    - name: Checking if the rhel qcow2 file already exists
      stat:
        path: "{{ (rhel_image.path|splitext)[0] }}.qcow2"
      register: rhel_qcow2

    - name: Creating the image facts
      set_fact:
        files: "{{ files + [ item.path ] }}"
      with_items:
        - "{{ atomic_image }}"
        - "{{ rhel_image }}"

    # Convert the raw images to qcow2 when images do not exist
    - name: Converting and compressing the images for transport
      # qemu-img convert -c -O qcow2 path/image_name.raw path/image_name.qcow2
      command: "qemu-img convert -c -O qcow2 {{ item }} {{ (item|splitext)[0] }}.qcow2"
      with_items: "{{ files }}"
      when: atomic_qcow2.stat.exists == False or rhel_qcow2.stat.exists == False

    # Create the local directory if needed.
    - name: Creating local directory
      delegate_to: localhost
      file:
        path: "{{ local_image_directory }}/{{ item|dirname }}"
        state: directory
      with_items: "{{ files }}"

    # Copy the images from the host.
    - name: Pull the files from the host
      synchronize:
        mode: pull
        src: "{{ (item|splitext)[0] }}.qcow2"
        dest: "{{ local_image_directory }}/{{ (item|splitext)[0] }}.qcow2"
        use_ssh_args: yes
        partial: yes
      with_items: "{{ files }}"

    # Optionally delete the qcow2 files on the host.
    - name: Deleting the qcow2 files
      file:
        path: "{{ (item|splitext)[0] }}.qcow2"
        state: absent
      with_items: "{{ files }}"
      when: delete_qcow2_images

    # Upload the images to OpenStack (Glance).
    - name: Upload the images to OpenStack
      delegate_to: locahost
      debug: msg="{{ openstack }} image create --disk-format qcow2 --container-format bare --file {{ local_image_directory }}/{{ (item|splitext)[0] }}.qcow2 ocp-{{ ocp_major_minor }}-{{ ('atomic' in item)|ternary('atomic','rhel')}}"
      with_items: "{{ files }}"
